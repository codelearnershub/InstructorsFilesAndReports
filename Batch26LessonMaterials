Learning Objectives
By the end of this lesson, students will be able to:

Define inheritance and explain its role in code reuse and hierarchy modeling.

Implement inheritance using base and derived classes.

Identify scenarios where inheritance is appropriate.

1. Introduction to Inheritance (10 minutes)
What is Inheritance?

Definition: A mechanism where a class (derived/child class) inherits properties and methods from another class (base/parent class).

Real-World Analogy:

A "Vehicle" class can have derived classes like "Car" and "Bicycle," which inherit common traits (e.g., Speed, Wheels) but add unique features.

Why Use Inheritance?

Promotes code reuse.

Models "is-a" relationships (e.g., a Dog is a Mammal).

Supports polymorphism (treating derived classes as their base type).

2. Key Concepts & Syntax (15 minutes)
Base and Derived Classes

// Base class  
public class Vehicle  
{  
    public int Speed { get; set; }  
    public void StartEngine() => Console.WriteLine("Engine started.");  
}  

// Derived class  
public class Car : Vehicle  
{  
    public int NumberOfDoors { get; set; }  
} 

3. Hands-On Activity: Building a Class Hierarchy 
Scenario: Model a system for a zoo with different types of animals.

Step 1: Define the Base Class

public class Animal  
{  
    public string Name { get; set; }  
    public virtual void Eat() => Console.WriteLine($"{Name} is eating.");  
}  

Step 2: Create Derived Classes

public class Lion : Animal  
{  
    public override void Eat() => Console.WriteLine($"{Name} devours meat!");  
}  

public class Giraffe : Animal  
{  
    public override void Eat() => Console.WriteLine($"{Name} munches on leaves.");  
}  

public class Zoo  
{  
    public void FeedAnimals(List<Animal> animals)  
    {  
        foreach (var animal in animals)  
        {  
            animal.Eat();  
        }  
    }  
}  

var zoo = new Zoo();  
var animals = new List<Animal>  
{  
    new Lion { Name = "Simba" },  
    new Giraffe { Name = "Melman" }  
};  

zoo.FeedAnimals(animals);  

4. Group Discussion: When to Use Inheritance 
How does inheritance reduce redundant code?

What are the limitations of deep inheritance hierarchies?

How does inheritance differ from composition? 

A simple project to depict how constructor works during inherence was implemented

https://github.com/Iammurphyleo/Implementing-Inheritance

5. Common Mistakes & Best Practices
Mistakes to Avoid:

Overusing inheritance (e.g., forcing a "Square is a Rectangle" relationship).

Forgetting to mark base methods as virtual or derived methods as override.

Best Practices:

Use inheritance for true hierarchical relationships (e.g., Dog is a Animal).

Follow the Liskov Substitution Principle: Derived classes must be substitutable for their base class.

Prefer composition over inheritance for loosely coupled designs.

Additional Resources
Book: Head First Object-Oriented Analysis and Design (Inheritance Chapter).

Video: Liskov Substitution Principle Explained (YouTube).

Online Practice: Codewars OOP Challenges.

